package convertexcel;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.w3c.dom.Element;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author antv3
 */
public class MainPage extends javax.swing.JFrame {

    /**
     * Creates new form MainPage
     */
    public MainPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnInput = new javax.swing.JPanel();
        lbSelectFile = new javax.swing.JLabel();
        txtInputFile = new javax.swing.JTextField();
        btSelect = new javax.swing.JButton();
        btReset = new javax.swing.JButton();
        btConvert = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        xlsToXML = new javax.swing.JRadioButton();
        xmlToXls = new javax.swing.JRadioButton();
        btExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Excel to Xml Converter and Revert");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        pnInput.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204), null, null), "Input", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        lbSelectFile.setText("Select Excel file(.xls, .xlsx) or XML file to convert:");

        txtInputFile.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtInputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputFileActionPerformed(evt);
            }
        });

        btSelect.setText("Select File");
        btSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectActionPerformed(evt);
            }
        });

        btReset.setText("Reset");
        btReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnInputLayout = new javax.swing.GroupLayout(pnInput);
        pnInput.setLayout(pnInputLayout);
        pnInputLayout.setHorizontalGroup(
            pnInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnInputLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btSelect)
                .addGap(18, 18, 18)
                .addComponent(btReset)
                .addGap(17, 17, 17))
            .addGroup(pnInputLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(pnInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbSelectFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtInputFile))
                .addContainerGap())
        );
        pnInputLayout.setVerticalGroup(
            pnInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnInputLayout.createSequentialGroup()
                .addComponent(lbSelectFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtInputFile, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btReset)
                    .addComponent(btSelect))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btConvert.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btConvert.setText("Convert");
        btConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConvertActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("PROGRAM CONVERT FILE XLS TO XML AND REVERT");

        buttonGroup1.add(xlsToXML);
        xlsToXML.setText("XLS to XML");
        xlsToXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xlsToXMLActionPerformed(evt);
            }
        });

        buttonGroup1.add(xmlToXls);
        xmlToXls.setText("XML to XLS");

        btExit.setText("Exit");
        btExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(xlsToXML)
                .addGap(83, 83, 83)
                .addComponent(xmlToXls)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btConvert, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btExit)
                        .addGap(17, 17, 17))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(pnInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(xlsToXML)
                    .addComponent(xmlToXls))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btExit, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(btConvert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    public String typeConvert(Cell cell) {
        String value;
        switch (cell.getCellType()) {
            case Cell.CELL_TYPE_STRING -> {
                //field that represents string cell type
                value = cell.getStringCellValue();
                return value;
            }
            case Cell.CELL_TYPE_NUMERIC -> {
                //field that represents number cell type
                value = (long) cell.getNumericCellValue() + "";
                return value;
            }
            default -> {
            }

        }
        return null;
    }
    private void btConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConvertActionPerformed
        // TODO add your handling code here:
        if (txtInputFile.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "You not selected file", "Notification", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!xlsToXML.isSelected() && !xmlToXls.isSelected()) {
            JOptionPane.showMessageDialog(this, "You not selected type converted", "Notification", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (xlsToXML.isSelected()) {

            String path = txtInputFile.getText();
            String[] ex = path.split("\\.");
            if (ex[ex.length - 1].equals("xls")) {
                try {
                    Workbook workbook = new HSSFWorkbook(new FileInputStream(path));
                    //Tạo 1 document xml trong java
                    DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                    //Tạo con
                    DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                    //Tài liệu document mới
                    Document doc = (Document) docBuilder.newDocument();
                    //Thẻ data
                    Element rootElement = doc.createElement("data");
                    //Add vào
                    doc.appendChild(rootElement);

                    // Lặp lại trên tất cả các trang tính trong tệp Excel
                    Iterator<Sheet> sheetIterator = workbook.iterator();
                    while (sheetIterator.hasNext()) {
                        Sheet sheet = sheetIterator.next();

                        // Tạo element set
                        Element sheetElement = doc.createElement("sheet");
                        sheetElement.setAttribute("name", sheet.getSheetName());
                        rootElement.appendChild(sheetElement);

                        // Duyệt qua tưng row
                        Iterator<Row> rowIterator = sheet.iterator();
                        while (rowIterator.hasNext()) {
                            Row row = rowIterator.next();

                            // Tạo element row mới
                            Element rowElement = doc.createElement("row");
                            sheetElement.appendChild(rowElement);

                            // Duyệt qua từng row
                            Iterator<Cell> cellIterator = row.iterator();
                            while (cellIterator.hasNext()) {
                                Cell cell = cellIterator.next();

                                // Tạo cell mới
                                Element cellElement = doc.createElement("cell");
                                cellElement.setAttribute("column", String.valueOf(cell.getColumnIndex()));

                                // Cập nhật value
                                cellElement.appendChild(doc.createTextNode(typeConvert(cell)));

                                // Thêm cell vào row
                                rowElement.appendChild(cellElement);
                            }
                        }
                    }
                    JFileChooser file = new JFileChooser();
                    file.setDialogTitle("Select path xml file");
                    file.setAcceptAllFileFilterUsed(false);
                    FileNameExtensionFilter filter = new FileNameExtensionFilter("XML File (.xml)", "xml");
                    file.addChoosableFileFilter(filter);
                    int returnValue = file.showSaveDialog(null);
                    if (returnValue == JFileChooser.APPROVE_OPTION) {
                        //Ghi file sử dụng transformer
                        TransformerFactory transformerFactory = TransformerFactory.newInstance();
                        Transformer transformer = transformerFactory.newTransformer();
                        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
                        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                        DOMSource source = new DOMSource(doc);
                        StreamResult result = new StreamResult(new FileOutputStream(new File(file.getSelectedFile().getAbsolutePath() + ".xml")));
                        //Ghi file
                        transformer.transform(source, result);
                        JOptionPane.showMessageDialog(this, "Convert Succerfully", "Convert OK", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (FileNotFoundException ex1) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex1);
                } catch (IOException ex1) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex1);
                } catch (ParserConfigurationException ex1) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex1);
                } catch (TransformerConfigurationException ex1) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex1);
                } catch (TransformerException ex1) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex1);
                }
            } else {
                try {
                    Workbook workbook = new XSSFWorkbook(new FileInputStream(path));
                    DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                    DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                    Document doc = (Document) docBuilder.newDocument();
                    Element rootElement = doc.createElement("data");
                    doc.appendChild(rootElement);
                    // ĐỌc toàn bộ sheet trong file excel
                    Iterator<Sheet> sheetIterator = workbook.iterator();
                    while (sheetIterator.hasNext()) {
                        Sheet sheet = sheetIterator.next();

                        // Tạo cái root mới
                        Element sheetElement = doc.createElement("sheet");
                        sheetElement.setAttribute("name", sheet.getSheetName());
                        rootElement.appendChild(sheetElement);

                        // Đọc toàn bộ row
                        Iterator<Row> rowIterator = sheet.iterator();
                        while (rowIterator.hasNext()) {
                            Row row = rowIterator.next();

                            // Tạo ptu row mới
                            Element rowElement = doc.createElement("row");
                            sheetElement.appendChild(rowElement);

                            // Tạo row
                            Iterator<Cell> cellIterator = row.iterator();
                            while (cellIterator.hasNext()) {
                                Cell cell = cellIterator.next();

                                // Tạo new element cell mới
                                Element cellElement = doc.createElement("cell");
                                cellElement.setAttribute("column", String.valueOf(cell.getColumnIndex()));

                                // Cập nhật giá trị của row
                                cellElement.appendChild(doc.createTextNode(typeConvert(cell)));

                                // Thêm row vào cell
                                rowElement.appendChild(cellElement);
                            }
                        }
                    }
                    JFileChooser file = new JFileChooser();
                    file.setDialogTitle("Select path xml file");
                    file.setAcceptAllFileFilterUsed(false);
                    FileNameExtensionFilter filter = new FileNameExtensionFilter("XML File (.xml)", "xml");
                    file.addChoosableFileFilter(filter);
                    int returnValue = file.showSaveDialog(null);
                    if (returnValue == JFileChooser.APPROVE_OPTION) {
                        TransformerFactory transformerFactory = TransformerFactory.newInstance();
                        Transformer transformer = transformerFactory.newTransformer();
                        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
                        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                        DOMSource source = new DOMSource(doc);
                        StreamResult result = new StreamResult(new FileOutputStream(new File(file.getSelectedFile().getAbsolutePath() + ".xml")));
                        transformer.transform(source, result);
                    }
                    JOptionPane.showMessageDialog(this, "Convert Succerfully", "Convert OK", JOptionPane.INFORMATION_MESSAGE);
                } catch (FileNotFoundException ex1) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex1);
                } catch (IOException ex1) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex1);
                } catch (ParserConfigurationException ex1) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex1);
                } catch (TransformerConfigurationException ex1) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex1);
                } catch (TransformerException ex1) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex1);
                }

            }
        }

        if (xmlToXls.isSelected()) {
            try {
                // đọc XML file
                String xmlFilePath = txtInputFile.getText();
                File xmlFile = new File(xmlFilePath);
                DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
                Document doc = (Document) documentBuilder.newDocument();
                Document document = documentBuilder.parse(xmlFile);

                // tạo new Excel workbook
                Workbook workbook = new XSSFWorkbook();

                // Lấy phần tử gốc của tài liệu XML
                Element root = document.getDocumentElement();

                // Lặp lại trên tất cả các thành phần trang tính trong tài liệu XML
                NodeList sheetNodes = root.getElementsByTagName("sheet");
                for (int i = 0; i < sheetNodes.getLength(); i++) {
                    Node sheetNode = sheetNodes.item(i);
                    if (sheetNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element sheetElement = (Element) sheetNode;

                        // tạo a new Excel sheet
                        Sheet sheet = workbook.createSheet(sheetElement.getAttribute("name"));

                        // Lặp lại trên tất cả các thành phần hàng trong phần tử trang tính
                        NodeList rowNodes = sheetElement.getElementsByTagName("row");
                        for (int j = 0; j < rowNodes.getLength(); j++) {
                            Node rowNode = rowNodes.item(j);
                            if (rowNode.getNodeType() == Node.ELEMENT_NODE) {
                                Element rowElement = (Element) rowNode;

                                // tạo new Excel row
                                Row row = sheet.createRow(j);

                                // Lặp lại trên tất cả các ô trong hàng
                                NodeList cellNodes = rowElement.getElementsByTagName("cell");
                                for (int k = 0; k < cellNodes.getLength(); k++) {
                                    Node cellNode = cellNodes.item(k);
                                    if (cellNode.getNodeType() == Node.ELEMENT_NODE) {
                                        Element cellElement = (Element) cellNode;

                                        // tạo mới Excel cell
                                        Cell cell = row.createCell(Integer.parseInt(cellElement.getAttribute("column")));

                                        // cập nhập giá trị
                                        cell.setCellValue(cellElement.getTextContent());
                                    }
                                }
                            }
                        }
                    }
                }

                // viết Excel workbook ra file
                JFileChooser file = new JFileChooser();
                file.setDialogTitle("Select path xlsx file");
                file.setAcceptAllFileFilterUsed(false);
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Exel File (.xlsx)", "xlsx");
                file.addChoosableFileFilter(filter);
                int returnValue = file.showSaveDialog(null);
                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    
                    FileOutputStream outputStream = new FileOutputStream(new File(file.getSelectedFile().getAbsolutePath() + ".xlsx"));
                    workbook.write(outputStream);
                    workbook.close();
                    JOptionPane.showMessageDialog(this, "Convert Succerfully", "Convert OK", JOptionPane.INFORMATION_MESSAGE);
                    System.out.println("XML file converted to Excel successfully!");
                }
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SAXException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btConvertActionPerformed

    private void btResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btResetActionPerformed
        // TODO add your handling code here:
        txtInputFile.setText("");
    }//GEN-LAST:event_btResetActionPerformed

    private void btSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        fileChooser.setDialogTitle("Open");
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".xls, .xlsx, .xml", "xls", "xlsx", "xml");
        fileChooser.addChoosableFileFilter(filter);
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            txtInputFile.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btSelectActionPerformed

    private void xlsToXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xlsToXMLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xlsToXMLActionPerformed

    private void txtInputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInputFileActionPerformed

    private void btExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExitActionPerformed
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to exit?",
                "Confirm", JOptionPane.YES_NO_OPTION);
        if(confirm == JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }//GEN-LAST:event_btExitActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.setIconImage(new ImageIcon(getClass().getResource("IconConvert.png")).getImage());
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to exit?",
                "Confirm", JOptionPane.YES_NO_OPTION);
        if(confirm == JOptionPane.YES_OPTION){
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConvert;
    private javax.swing.JButton btExit;
    private javax.swing.JButton btReset;
    private javax.swing.JButton btSelect;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbSelectFile;
    private javax.swing.JPanel pnInput;
    private javax.swing.JTextField txtInputFile;
    private javax.swing.JRadioButton xlsToXML;
    private javax.swing.JRadioButton xmlToXls;
    // End of variables declaration//GEN-END:variables
}
